
//-------------------- BEGIN MODULE SCOPE VARIABLES ------------------------ 
BarVis = function(_parentElement, _population, _district, _filteredData, _stateMap){
  this.parentElement = _parentElement;
  this.population = _population;
  this.districtData = _district;
  this.filteredData = _filteredData;
  this.displayData = jQuery.extend(true, {}, _filteredData);
  this.stateMap = _stateMap;
  this.crimeStats = [];
  this.countCrimes();
  this.initVis();
}
//-------------------- END MODULE SCOPE VARIABLES ----------------------------

//-------------------- BEGIN COUNT METHODS -----------------------------------
BarVis.prototype.countCrimes = function(){     
  var that = this;
  var zip, key, index, crime, y0, dataset;
  dataset = new Array();

  for (zip in this.population){
    this.crimeStats[zip] = {}
    for (key in this.stateMap.crimeType){
      this.crimeStats[zip][key] = 0;
    }
    this.crimeStats[zip]['total'] = 0;
  }

  for (key in this.stateMap.crimeType){
    if (key in this.filteredData && this.stateMap.crimeType[key]){
      crime = this.filteredData[key].features;
      crime.forEach(function(d, i){
        zip = d.properties.zip;
        if (zip !== 'N/A'){
          that.crimeStats[zip][key] += 1
          that.crimeStats[zip]['total'] += 1
          that.crimeStats['city'][key] += 1
          that.crimeStats['city']['total'] += 1
        }
      })
    }
  }
  index = 0;
  for (key in this.crimeStats){
    if (key != 'city' && key != 'N/A'){
      y0 = 0;
      dataset[index] = new Object();
      dataset[index].key = key 
      dataset[index].val = d3.keys(this.stateMap.crimeType).map(function(name){
        return {key: key, name: name, y0:y0, y1: y0 += +that.crimeStats[key][name]}; })
      dataset[index].total = dataset[index].val[dataset[index].val.length - 1].y1
      index += 1
    }
  }
  return dataset;
}

BarVis.prototype.countPerCapita = function(){
  var that = this;
  var format = d3.format('.2f')
  var dataset = this.countCrimes();

  dataset.forEach(function(d, i){
    var y0 = 0;
    d.val = d.val.map(function(data){
      return {key: data.key, name: data.name, y0: +format(y0), y1: y0 += +format((that.crimeStats[d.key][data.name]/(that.population[d.key]/1000)))};
    })
    d.total = +format(d.total/(that.population[d.key]/1000))
  })
  return dataset;
}

// BarVis.prototype.getDisplayData = function(){
//   var that = this;

//   var dataset_test = new Array();
//   var index = 0;
//   for(var key in this.crimeStats){
//     if (key != 'city' && key != 'N/A'){
//       var y0 = 0;
//       dataset_test[index] = new Object();
//       dataset_test[index].val = that.color.domain().map(function(name){
//         return {district: key, name: name, y0:y0, y1: y0 += +that.crimeStats[key][name]}; })
//       dataset_test[index].total = dataset_test[index].val[dataset_test[index].val.length - 1].y1; 
//       dataset_test[index].key = key;
//       index += 1;
//     }
//   }
//   return dataset_test;
// }

BarVis.prototype.countDayOfWeek = function(){
  var that = this;
  var time;
  var data = new Array();
  var data_test = new Array();
  var final_data = new Array();
  var dow_map = { 
    'Monday': 1,
    'Tuesday': 2,
    'Wednesday': 3,
    'Thursday': 4,
    'Friday': 5,
    'Saturday': 6,
    'Sunday': 7
  }


  for (var day in dow_map){
    data_test[day] = new Array();
    for (var crime in this.stateMap.crimeType){
      if (this.stateMap.crimeType.hasOwnProperty(crime)){
        data_test[day][crime] = 0   
      }
    }
  }
  
  for (var key in this.filteredData){
    if (this.stateMap.crimeType[key]){
      this.filteredData[key].features.forEach(function(d, i){
        time = d.properties.dow 
        data_test[time][key] += 1
      })
    }
  }

  var final_data_test = new Array();
  var idx = 0;
  for (var day in data_test){
    var y0 = 0;
    final_data_test[idx] = new Object();
    final_data_test[idx].val = that.color.domain().map(function(name){
      return {day: day, name: name, y0:y0, y1: y0 += +data_test[day][name] }
    }) 
    final_data_test[idx].dow = day; 
    final_data_test[idx].total = final_data_test[idx].val[final_data_test[idx].val.length-1].y1; 
    idx += 1;
  }
  this.displayData = final_data_test;
}

BarVis.prototype.countHourOfDay = function(){
  var that = this;
  var time_data = new Array();
  var zero = d3.format("02d");
  var convertHour = d3.time.format("%H");
  var parseHour = d3.time.format("%H:%M").parse;
  
  for (var i = 0; i < 24; i++){
    time_data[zero(i)] = new Array();
    for (var key in this.stateMap.crimeType){
      time_data[zero(i)][key] = 0
    }
  }
  for (var key in this.filteredData){
    if(this.stateMap.crimeType[key]){
      this.filteredData[key].features.forEach(function(d, i){
        time = convertHour(parseHour(d.properties.time))
        time_data[time][key] += 1
      })
    }
  }

  var final_data = new Array()
  var idx = 0;
  for (var i = 0; i < 24; i++){
    var hour = zero(i);
    var y0 = 0;
    final_data[idx] = new Object()
    final_data[idx].val = that.color.domain().map(function(name){
      return {hour: hour, name: name, y0:y0, y1: y0 += +time_data[hour][name] }
    })
    final_data[idx].hour = hour;
     final_data[idx].total = final_data[idx].val[final_data[idx].val.length - 1].y1;
    idx+=1;
  }
  
  this.displayData = final_data;
}

BarVis.prototype.getDisplayData = function(){
  var tab, dataset;
  tab = this.stateMap.barTab;
  if (tab === 'crime_stat'){
    this.displayData = this.countCrimes();
  }
  else if (tab === 'per_capita'){
    this.displayData = this.countPerCapita();
  }
  else if (tab === 'day_of_week'){
    this.displayData = this.countDayOfWeek();
  }
  else if (tab === 'hour_of_day'){
    this.displayData = this.countHourOfDay();
  }
}
//-------------------- END COUNT METHODS -----------------------------------

//-------------------- BEGIN UPDATE METHODS ----------------------------------
BarVis.prototype.updateVis = function(){
  var that = this;
  var format = d3.format('.2f');
  this.color.domain(d3.keys(this.crimeStats['city']).filter(
    function(key){ return key!== 'total'}));
  
  this.getDisplayData();
  this.displayData.sort(function(a, b){return b.total - a.total});
    
  this.x.domain(this.displayData.map(function(d){return d.key}))
  this.y.domain([0, d3.max(this.displayData, function(d){return d.total;})])
  
  this.svg.selectAll(".g")
    .remove();

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d){
      var count = format(d.y1 - d.y0);
      return '<strong>District: </strong> <span>' + that.districtData[d.key] + '</span><br>'
      + '<strong>Crime: </strong> <span>' + d.name + '</span> <br>' 
      + '<strong>Incidents: </strong> <span>' + count + '</span> ' ;
    });

  this.svg.call(tip);

  this.svg.select(".y.axis").transition()
    .duration(500).call(this.yAxis)
  
  this.district = this.svg.selectAll('.district')
    .data(this.displayData, function(d){return d.key})
    .enter().append('g')
    .attr('class', 'g')
    .classed('test_border', function(d){ if(d.key == that.stateMap.location) return true;})
    .attr('transform', function(d){return 'translate(' + that.x(d.key) + ',0)';});

  this.district.selectAll('rect')
    .data(function(d){return d.val;})
    .enter().append('rect')
    .attr('width', this.x.rangeBand())
    .attr('y', function(d){return that.y(d.y1);})
    .attr('height', function(d){return that.y(d.y0) - that.y(d.y1);})
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
    .transition()
    .duration(500)
    .style('fill', function(d){return that.color(d.name);});

}

BarVis.prototype.drawDayOfWeek = function(){
  var that = this;
  this.margin = {top: 10, right: 40, bottom: 30, left: 40}
  this.width = parseInt(d3.select("#bar_chart").style("width"))- this.margin.left - this.margin.right;
  this.height = parseInt(d3.select("#bar_chart").style("height")) - this.margin.top - this.margin.bottom;

  this.svg.selectAll('rect')
    .remove();

  d3.select('#crime_svg')
    .remove();

  this.x = d3.scale.ordinal()
    .domain(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
    .rangeRoundBands([0, this.width], .1);

  this.y = d3.scale.linear()
    .range([this.height, 0]);

  this.y.domain([0, d3.max(this.displayData, function(d){return d.total})]);

  this.xAxis = d3.svg.axis()
    .scale(this.x)
    .orient("bottom");

  this.yAxis = d3.svg.axis()
    .scale(this.y)
    .orient("left");

  this.svg = d3.select("#bar_chart").append("svg")
    .attr('width', this.width + this.margin.left + this.margin.right)
    .attr('height', this.height + this.margin.top + this.margin.bottom)
    .attr('id', 'dow_svg')
    .append('g')
      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')
      
  this.svg.append('g')
    .attr('class', 'x axis')
    .attr('transform', 'translate(0,' + this.height + ')')

  this.svg.append('g')
    .attr('class', 'y axis')
    .append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', 0-this.margin.left)
    .attr('x', 0-(this.height/2))
    .attr('dy', '.71em')
    .style('text-anchor', 'middle')
    .text('Crime Incidents')

  this.color = d3.scale.ordinal()
    .range(['#fdb462', '#b3de69', '#8dd3c7', '#fed976', '#fccde5', '#bebada', '#bc80bd']);

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d){
      var count = d.y1 - d.y0;
      return '<strong>Day: </strong> <span>' + d.day + '</span><br>'
      + '<strong>Crime: </strong> <span>' + d.name + '</span> <br>' 
      + '<strong>Incidents: </strong> <span>' + count + '</span> ' ;
    });

  this.svg.call(tip);

  this.svg.select('.x.axis').transition()
    .duration(500)
    .call(this.xAxis)

  this.svg.select('.y.axis').transition()
    .duration(500)
    .call(this.yAxis)

  this.dow = this.svg.selectAll('.dow')
    .data(this.displayData, function(d){return d.dow})
    .enter().append('g')
    .attr('class', 'g')
    .attr('transform', function(d){return 'translate(' + that.x(d.dow) + ',0)';});

  this.dow.selectAll('rect')
    .data(function(d){return d.val})
    .enter().append('rect')
    .attr('width', this.x.rangeBand())
    .attr('y', function(d){return that.y(d.y1)})
    .attr("height", function(d){return that.y(d.y0)- that.y(d.y1);})
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
    .style('fill', function(d){return that.color(d.name)})

}

BarVis.prototype.drawHourOfDay = function(){
  var that = this;
  this.margin = {top: 10, right: 40, bottom: 30, left: 40}
  this.width = parseInt(d3.select("#bar_chart").style("width"))- this.margin.left - this.margin.right;
  this.height = parseInt(d3.select("#bar_chart").style("height")) - this.margin.top - this.margin.bottom;

  this.svg.selectAll('rect')
    .remove();

  d3.select('#crime_svg')
    .remove();

  
    
  var x_domain = d3.keys(this.displayData).map(function(d){return that.displayData[d].hour});
  // var x_domain = ["00", "01", "02", "03", "04", "05"]
  // var x_domain = [0, 2, 3, 4, 5]
  this.x = d3.scale.ordinal()
    .domain(x_domain)
    .rangeRoundBands([0, this.width], .1);

  this.y = d3.scale.linear()
    .range([this.height, 0]);

  this.y.domain([0, d3.max(this.displayData, function(d){return d.total})]);

  this.xAxis = d3.svg.axis()
    .scale(this.x)
    .orient("bottom");

  this.yAxis = d3.svg.axis()
    .scale(this.y)
    .orient("left");

  this.svg = d3.select("#bar_chart").append("svg")
    .attr('width', this.width + this.margin.left + this.margin.right)
    .attr('height', this.height + this.margin.top + this.margin.bottom)
    .attr('id', 'dow_svg')
    .append('g')
      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')
      
  this.svg.append('g')
    .attr('class', 'x axis')
    .attr('transform', 'translate(0,' + this.height + ')')

  this.svg.append('g')
    .attr('class', 'y axis')
    .append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', 0-this.margin.left)
    .attr('x', 0-(this.height/2))
    .attr('dy', '.71em')
    .style('text-anchor', 'middle')
    .text('Crime Incidents')

  this.color = d3.scale.ordinal()
    .range(['#fdb462', '#b3de69', '#8dd3c7', '#fed976', '#fccde5', '#bebada', '#bc80bd']);

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d){
      var count = d.y1 - d.y0;
      return '<strong>Hour: </strong> <span>' + d.hour + '</span><br>'
      + '<strong>Crime: </strong> <span>' + d.name + '</span> <br>' 
      + '<strong>Incidents: </strong> <span>' + count + '</span> ' ;
    });

  this.svg.call(tip);

  this.svg.select('.x.axis').transition()
    .duration(500)
    .call(this.xAxis)

  this.svg.select('.y.axis').transition()
    .duration(500)
    .call(this.yAxis)

  this.hod = this.svg.selectAll('.hod')
    .data(this.displayData, function(d){return d.hour})
    .enter().append('g')
    .attr('class', 'g')
    .attr('transform', function(d){return 'translate(' + that.x(d.hour) + ',0)';});

  this.hod.selectAll('rect')
    .data(function(d){return d.val})
    .enter().append('rect')
    .attr('width', this.x.rangeBand())
    .attr('y', function(d){return that.y(d.y1)})
    .attr("height", function(d){return that.y(d.y0)- that.y(d.y1);})
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide)
    .style('fill', function(d){return that.color(d.name)})
}

//-------------------- END UPDATE METHODS ------------------------------------

//-------------------- BEGIN EVENT HANDLERS-----------------------------------
BarVis.prototype.onTypeChange = function(state_map){
  this.stateMap = state_map;
  var tab = this.stateMap.barTab;
  if (tab === 'crime_stat'){
    this.updateVis()
  }
  else if (tab === 'per_capita'){
    this.updateVis()
  }
  else if (tab === 'day_of_week'){
    this.countDayOfWeek();
    this.drawDayOfWeek();
  }
  else if (tab === 'hour_of_day'){
    this.countHourOfDay();
    this.drawHourOfDay();
  }
}

BarVis.prototype.onLocationChange = function(state_map){
  var that = this;
  this.stateMap = state_map;
  var tab = this.stateMap.barTab;

  if (tab === 'crime_stat'){
    this.district.classed('test_border', function(d){ if(d.key == that.stateMap.location) return true;})
  }
  else if (tab === 'per_capita'){
    this.district.classed('test_border', function(d){ if(d.key == that.stateMap.location) return true;})
  }
  else if (tab === 'day_of_week'){
    this.countDayOfWeek();
    this.drawDayOfWeek();
  }
  else if (tab === 'hour_of_day'){
    this.countHourOfDay();
    this.drawHourOfDay();
  }
}

BarVis.prototype.onTimeChange = function(state_map, filtered_data){
  this.stateMap = state_map;
  this.filteredData = filtered_data;
  if (tab === 'crime_stat'){
    this.countCrimes();
    this.updateVis()
  }
  else if (tab === 'per_capita'){
    this.countPerCapita();
    this.updateVis()
  }
  else if (tab === 'day_of_week'){
    this.countDayOfWeek();
    this.drawDayOfWeek();
  }
  else if (tab === 'hour_of_day'){
    this.countHourOfDay();
    this.drawHourOfDay();
  }
}

BarVis.prototype.onTabChange = function(state_map){
  this.stateMap = state_map
  var tab = this.stateMap.barTab;
  this.getDisplayData();
  if (tab === 'crime_stat'){
    this.updateVis()
  }
  else if (tab === 'per_capita'){
    this.updateVis()
  }
  else if (tab === 'day_of_week'){
    this.drawDayOfWeek();
  }
  else if (tab === 'hour_of_day'){
    this.drawHourOfDay();
  }
}

//-------------------- END EVENT HANDLERS ------------------------------------

//-------------------- BEGIN INIT METHODS ------------------------------------  
BarVis.prototype.initVis = function(){
  var that = this;
  
  this.margin = {top: 10, right: 40, bottom: 30, left: 40}
  
  this.width = parseInt(d3.select("#bar_chart").style("width")) 
  - this.margin.left - this.margin.right;

  this.height = parseInt(d3.select("#bar_chart").style("height")) 
  - this.margin.top - this.margin.bottom;

  this.x = d3.scale.ordinal()
    .rangeRoundBands([0, this.width], .1);

  this.y = d3.scale.linear()
    .rangeRound([this.height, 0]);

  this.color = d3.scale.ordinal()
    .range(['#fdb462', '#b3de69', '#8dd3c7', '#fed976', 
    '#fccde5', '#bebada', '#bc80bd']);

  this.xAxis = d3.svg.axis()
    .scale(this.x)
    .orient('bottom')


  this.yAxis = d3.svg.axis()
    .scale(this.y)
    .orient('left')
    .ticks(5)

  this.svg = d3.select("#bar_chart").append("svg")
    .attr('width', this.width + this.margin.left + this.margin.right)
    .attr('height', this.height + this.margin.top + this.margin.bottom)
    .attr('id','current_svg')
    .append('g')
      .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")")

  this.svg.append('g')
    .attr('class', 'y axis')
    .append('text')
    .attr('transform', 'rotate(-90)')
    .attr('y', 0 - this.margin.left)
    .attr('x', 0 - (this.height/2))
    .attr('dy', '.71em')
    .style('text-anchor', 'middle')
    .text('Crime Incidents')

  this.updateVis();

}
//-------------------- END PUBLIC METHODS --------------------------------  